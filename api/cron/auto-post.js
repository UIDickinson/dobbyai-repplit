import { redditService } from '../../src/services/reddit-service.js';
import { postGenerator } from '../../src/services/post-generator.js';
import { getUnusedContent, markContentAsUsed, savePost, updatePost, logAnalytics } from '../../src/config/database.js';
import { logger } from '../../src/utils/logger.js';
import { parseBoolean } from '../../src/utils/helpers.js';

export const config = {
  maxDuration: 60,
};

export default async function handler(req, res) {
  // Verify cron request
  const authHeader = req.headers.authorization;
  if (authHeader !== `Bearer ${process.env.CRON_SECRET || 'local'}`) {
    logger.warn('Unauthorized cron request');
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    // Check if auto-posting is enabled
    const autoPostEnabled = parseBoolean(process.env.ENABLE_AUTO_POSTING, true);
    if (!autoPostEnabled) {
      logger.info('Auto-posting is disabled');
      return res.status(200).json({ 
        success: true, 
        message: 'Auto-posting is disabled',
        posted: false 
      });
    }

    logger.info('Starting auto-post generation...');

    // Get unused content from database
    const unusedContent = await getUnusedContent(3);

    if (unusedContent.length === 0) {
      logger.info('No unused content available for posting');
      return res.status(200).json({ 
        success: true, 
        message: 'No content available',
        posted: false 
      });
    }

    // Select a random piece of content
    const selectedContent = unusedContent[Math.floor(Math.random() * unusedContent.length)];
    logger.info(`Selected content: ${selectedContent.title}`);

    // Determine post type
    const postType = postGenerator.determinePostType(selectedContent.content);
    logger.info(`Post type: ${postType}`);

    // Generate post
    const generatedPost = await postGenerator.generatePost(
      selectedContent.content,
      postType
    );

    // Validate post
    const validation = postGenerator.validatePost(generatedPost);
    if (!validation.valid) {
      logger.error('Generated post validation failed:', validation.errors);
      return res.status(500).json({
        success: false,
        error: 'Post validation failed',
        details: validation.errors
      });
    }

    // Format for Reddit
    const formattedContent = postGenerator.formatPostForReddit(generatedPost);

    // Save to database first (as draft)
    const savedPost = await savePost({
      title: generatedPost.title,
      content: formattedContent,
      postType: postType,
      sourceUrl: selectedContent.source_url,
      status: 'pending',
      metadata: {
        ...generatedPost.metadata,
        contentId: selectedContent.id,
        autoGenerated: true
      }
    });

    logger.info(`Post saved to database with ID: ${savedPost.id}`);

    // Post to Reddit (user's profile)
	const submission = await redditService.submitPostToProfile(
	generatedPost.title,
	formattedContent
	);

   // Update post with Reddit ID and status
	await updatePost(savedPost.id, {
	redditPostId: submission.id,  // ‚Üê This line
	status: 'published',
	postedAt: new Date().toISOString()
   });

    // Mark content as used
    await markContentAsUsed(selectedContent.id);

    // Log analytics
    await logAnalytics('auto_post_created', {
      postId: savedPost.id,
      redditPostId: submission.id,
      postType: postType,
      title: generatedPost.title,
      contentSource: selectedContent.source_url
    });

    logger.info(`Successfully posted to Reddit: ${submission.id}`);

    return res.status(200).json({
      success: true,
      posted: true,
      post: {
        id: savedPost.id,
        redditId: submission.id,
        title: generatedPost.title,
        url: `https://reddit.com${submission.permalink}`,
        postType: postType
      }
    });

  } catch (error) {
    logger.error('Auto-post cron error:', error);
    
    // Log failed attempt
    await logAnalytics('auto_post_failed', {
      error: error.message,
      timestamp: new Date().toISOString()
    });

    return res.status(500).json({
      success: false,
      error: 'Failed to create auto-post',
      message: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
}
